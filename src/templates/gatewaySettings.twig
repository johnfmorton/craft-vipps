{% from "_includes/forms" import textField, lightswitchField, selectField %}

{{ textField({
    label: "Client Id"|t('vipps'),
    instructions: "Your Vipps Client Id."|t('vipps'),
    id: 'clientId',
    class: 'ltr',
    name: 'clientId',
    value: gateway.clientId,
    required: true,
    errors: gateway.getErrors('clientId')
}) }}

{{ textField({
    label: "Client Secret"|t('vipps'),
    instructions: "Your Vipps Client Secret."|t('vipps'),
    id: 'clientSecret',
    class: 'ltr',
    name: 'clientSecret',
    value: gateway.clientSecret,
    required: true,
    errors: gateway.getErrors('clientSecret')
}) }}

{{ textField({
    label: "Subscription key to get access token"|t('vipps'),
    instructions: "Your Vipps Client Secret."|t('vipps'),
    id: 'subscriptionKeyAccessToken',
    class: 'ltr',
    name: 'subscriptionKeyAccessToken',
    value: gateway.subscriptionKeyAccessToken,
    required: true,
    errors: gateway.getErrors('subscriptionKeyAccessToken')
}) }}

{{ textField({
    label: "Subscription key to perform authorized API calls"|t('vipps'),
    instructions: "Your Vipps Client Secret."|t('vipps'),
    id: 'subscriptionKeyEcommerce',
    class: 'ltr',
    name: 'subscriptionKeyEcommerce',
    value: gateway.subscriptionKeyEcommerce,
    required: true,
    errors: gateway.getErrors('subscriptionKeyEcommerce')
}) }}

{{ textField({
    label: "Merchant Serial Number"|t('vipps'),
    instructions: "Your publishable Stripe API key."|t('vipps'),
    id: 'merchantSerialNumber',
    class: 'ltr',
    name: 'merchantSerialNumber',
    value: gateway.merchantSerialNumber,
    required: true,
    errors: gateway.getErrors('merchantSerialNumber')
}) }}

{{ textField({
    label: "Transaction text"|t("vipps"),
    instructions: "This will be listed in the Vipps app when a user authorizes a payment."|t("vipps"),
    id: 'transactionText',
    name: 'transactionText',
    class: 'ltr',
    value: gateway.transactionText,
    errors: gateway.getErrors('transactionText')
}) }}

{{ textField({
    label: "Fallback URL"|t("vipps"),
    instructions: "The user will be redirected here when finishing the payment."|t("vipps"),
    id: 'fallbackUrl',
    name: 'fallbackUrl',
    class: 'ltr',
    value: gateway.fallbackUrl,
    errors: gateway.getErrors('fallbackUrl')
}) }}

{{ textField({
    label: "Auth token"|t("vipps"),
    instructions: "Token is used to verify callbacks from Vipps."|t("vipps"),
    id: 'authToken',
    name: 'authToken',
    class: 'ltr',
    readonly: true,
    value: authToken,
    required: true,
    errors: gateway.getErrors('authToken')
}) }}


{{ lightswitchField({
    label: "Test mode"|t('vipps'),
    name: 'testMode',
    on: gateway.testMode,
    errors: gateway.getErrors('testMode'),
}) }}

{{ lightswitchField({
    label: "Capture on status change"|t('vipps'),
    description: "This will enable the gateway to automatically capture on a status change - say when you change from _New_ to _Shipped_"|t('vipps'),
    name: 'captureOnStatusChange',
    on: gateway.captureOnStatusChange,
    errors: gateway.getErrors('captureOnStatusChange'),
}) }}


{{ selectField({
    label: "Capture status"|t("vipps"),
    instructions: "Status for automatic capture."|t("vipps"),
    id: 'captureStatusUid',
    name: 'captureStatusUid',
    value: gateway.captureStatusUid,
    options: statuses,
    errors: gateway.getErrors('captureStatusUid')
}) }}

{{ lightswitchField({
    label: "Create user on express checkout"|t('vipps'),
    instructions: "This will create a user when someone performs a Express Checkout and they don't already have a user matching their email",
    name: 'createUserOnExpressCheckout',
    on: gateway.createUserOnExpressCheckout,
    errors: gateway.getErrors('createUserOnExpressCheckout'),
}) }}


{{ lightswitchField({
    label: "New cart on Express Checkout"|t('vipps'),
    instructions: "This will clear the cart if there is already any items in it when a user performs a Express Checkout",
    name: 'newCartOnExpressCheckout',
    on: gateway.newCartOnExpressCheckout,
    errors: gateway.getErrors('newCartOnExpressCheckout'),
}) }}
